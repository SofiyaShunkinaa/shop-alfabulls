$( document ).ready(function() {

  $('.catalog-item-btn').on( "click", function() {
    $(this).css('display', 'none');
    $(this).parent().find('.btn-cart-js').css('display', 'block');
 
//    $(this).text('оформить заказ');
//    $(this).val('');
//    $(this).attr('onclick', "$('.cart').addClass('show').removeClass('hide');");
//    return true;
  });
});

const $bigBall = document.querySelector('.cursor__ball--big');
const $smallBall = document.querySelector('.cursor__ball--small');
const $hoverables = document.querySelectorAll('.hoverable');

// Listeners
// document.body.addEventListener('mousemove', onMouseMove);
// for (let i = 0; i < $hoverables.length; i++) {
//   $hoverables[i].addEventListener('mouseenter', onMouseHover);
//   $hoverables[i].addEventListener('mouseleave', onMouseHoverOut);
// }

// Move the cursor
// function onMouseMove(e) {
//   TweenMax.to($bigBall, .4, {
//     x: e.pageX - 15,
//     y: e.pageY - 15
//   })
//   TweenMax.to($smallBall, .1, {
//     x: e.pageX - 5,
//     y: e.pageY - 7
//   })
// }

// // Hover an element
// function onMouseHover() {
//   TweenMax.to($bigBall, .3, {
//     scale: 4
//   })
// }
// function onMouseHoverOut() {
//   TweenMax.to($bigBall, .3, {
//     scale: 1
//   })
// }

function filtersChange() {
    const filterContainer = document.querySelectorAll('[data-filter]');

    if (!filterContainer.length > 0) return;
    
    filterContainer.forEach((el) => {
        el.querySelector('[data-filter-btn]').addEventListener('click', () => {
            el.querySelector('[data-filter-btn]').classList.toggle('active');
            el.querySelector('[data-filter-container]').classList.toggle('active');
        });
    });
}

function productSlider() {
    if (!document.querySelector('.product-gallery')) return false;

    let productSliderThumb = new Swiper('.product-gallery-thumbs', {
        spaceBetween: 10,
        slidesPerView: 2,
        freeMode: true,
        watchSlidesProgress: true,

        breakpoints: {
            "1280": {
                slidesPerView: 5,
            },
            "1024": {
                slidesPerView: 4,
            },
            "768": {
                slidesPerView: 3,
            },
        }
    });

    let productSlider = new Swiper('.product-gallery-main', {
        slidesPerView: 1,
        thumbs: {
            swiper: productSliderThumb,
        },
        navigation: {
            nextEl: ".product-gallery-thumbs .arrow-right",
            prevEl: ".product-gallery-thumbs .arrow-left",
        },
    });
}

function reviewsSlider() {
    if (!document.querySelector('.reviews-slider')) return false;

    let reviewsSlider = new Swiper('.reviews-slider', {
        spaceBetween: 30,
        slidesPerView: 1,
        loop: true,
        navigation: {
            nextEl: ".reviews .arrow-right",
            prevEl: ".reviews .arrow-left",
        },
        breakpoints: {
            "992": {
                slidesPerView: 2,
            }
        }
    })
}

function aboutSliders() {
    if (document.querySelectorAll('.slider-inner').length > 0) {
        document.querySelectorAll('.slider-inner').forEach((el) => {
            let aboutSlider = new Swiper(el.querySelector('.about-image-slider'), {
                slidesPerView: 1,
                loop: true,
                navigation: {
                    nextEl: el.querySelector('.about-image-slider-nav.arrow-right'),
                    prevEl: el.querySelector('.about-image-slider-nav.arrow-left'),
                },
            })
        })
    }
}

function countsChange() {
    const countsInit = document.querySelectorAll('[counts-init]');

    countsInit.forEach((el) => {
        el.querySelector('#minus').addEventListener('click', () => {
            if (Number(el.querySelector('input').value) < 2) return false;
            el.querySelector('input').value = Number(el.querySelector('input').value) - 1;
        });
        el.querySelector('#plus').addEventListener('click', () => {
            if (Number(el.querySelector('input').value) > 98) return false;
            el.querySelector('input').value = Number(el.querySelector('input').value) + 1;
        });
    });
}

function mobileMenu() {
    const burgerBtn = document.querySelector('.burger-btn');
    const mobileMenuContainer = document.querySelector('.mobile-menu');

    burgerBtn.addEventListener('click', () => {
        burgerBtn.classList.toggle('active');
        mobileMenuContainer.classList.toggle('active');
    });
}

// init functions
countsChange();
productSlider();
aboutSliders();
filtersChange();
reviewsSlider();
mobileMenu();

document.addEventListener("DOMContentLoaded", (event) => {
    gsap.registerPlugin(ScrollTrigger,ScrollToPlugin,TextPlugin)

    // Функиця для переинициализации анимаций
    function animationConsistently(childrens) {
        gsap.from(childrens, {
            y: 50,
            opacity: 0,
            ease: "power4.out",
            delay: 0.2,
            stagger: 0.2,
        });
    };

    document.querySelectorAll('.parent-animation').forEach((parent) => {
        gsap.from(parent.children, {
            y: 50,
            opacity: 0,
            ease: "power4.out",
            delay: 0.2,
            stagger: 0.2,
    
            scrollTrigger: {
                trigger: parent,
                start: 'top bottom',
            },
        });
    });
    

    const titleAnim = gsap.utils.toArray(".anim-title")
    titleAnim.forEach((title, i) => {
        gsap.from(title, 0.8, {
            scrollTrigger: {
                trigger: title,
                start: 'top bottom',
            },
    
            y: 50,
            opacity: 0,
            ease: "power4.out",
            delay: 0.2,
            stagger: 0.3,
        });
    })

    const animImgReverse = gsap.utils.toArray(".anim-img-reverse")
    animImgReverse.forEach((img, i) => {
        gsap.from(img, 0.8, {
            scrollTrigger: {
                trigger: img,
                start: 'top bottom',
            },
    
            x: -50,
            opacity: 0,
            ease: "power4.out",
            delay: 0.2,
            stagger: {
                amount: 0.3
            }
        });
    })

    const animationImg = gsap.utils.toArray(".animation-img")
    animationImg.forEach((img, i) => {
        gsap.from(img, 1.2, {
            scrollTrigger: {
                trigger: img,
                start: 'top bottom',
            },
    
            x: 100,
            opacity: 0,
            ease: "power4.out",
            delay: 0.2,
            stagger: {
                amount: 0.3
            }
        });
    });

    const backgroundAnimationImg = gsap.utils.toArray(".background-animation-img")
    backgroundAnimationImg.forEach((img, i) => {
        gsap.from(img, 1.2, {
            scrollTrigger: {
                trigger: img,
                start: 'top bottom',
            },
    
            backgroundPositionX: -100,
            ease: "power4.out",
            delay: 0.3,
        });
    });

    let requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

    const goTopButton = document.querySelector('[data-action="gotop"]');
    const windowViewPortHeight = window.innerHeight; // browser viewport height
    let isRequestingAnimationFrame = false;

    if (!goTopButton) {
        return;
    }

    goTopButton.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    window.addEventListener('scroll', function() {
        if (!isRequestingAnimationFrame) {
            requestAnimationFrame(filterGoTopButtonVisibility);
            isRequestingAnimationFrame = true;
        }
    });

    function filterGoTopButtonVisibility(timestamp) {
        let windowPageYOffset = window.pageYOffset || document.documentElement.scrollTop;
        if (windowPageYOffset > windowViewPortHeight) {
            goTopButton.classList.add('show');
            isRequestingAnimationFrame = false;
        } else {
            goTopButton.classList.remove('show');
            requestAnimationFrame(filterGoTopButtonVisibility);
        }
    }
});


// Tilt animation function
// function debounce(a,b,c){var d;return function(){var e=this,f=arguments;clearTimeout(d),d=setTimeout(function(){d=null,c||a.apply(e,f)},b),c&&!d&&a.apply(e,f)}}

// var TiltAnimation = function() {
  
//   var
//     hero,
//     mouseX,
//     mouseY,
//     textX,
//     textY;

//   var _init = function() {
//     mouseX    = 0;
//     mouseY    = 0;
//     slider    = document.getElementById('hero');
//     textX     = document.getElementsByClassName('slider__itemX')[0];
//     textY     = document.getElementsByClassName('slider__itemY')[0];
    
//     _addEventHandlers();    
//   }
  
//   var _addEventHandlers = function() {
//     window.addEventListener('mousemove', _getMousePos, false);
//     if (window.DeviceMotionEvent != undefined) {
//       window.addEventListener('devicemotion', _accelerometerUpdate, false);
//     }
//   }
 
//   var _accelerometerUpdate = function(e) {
//     // http://stackoverflow.com/questions/4474508/access-accelerometer-via-javascript-in-android
//     var aX = event.accelerationIncludingGravity.x*1;
//     var aY = event.accelerationIncludingGravity.y*1;
//     var aZ = event.accelerationIncludingGravity.z*1;
//     //The following two lines are just to calculate a
//     // tilt. Not really needed. 
//     var xPosition = Math.atan2(aY, aZ) * 20;
//     var yPosition = Math.atan2(aX, aZ) * 20;
    
//     xPosition = Math.round(xPosition * 1000) / 1000;
//     yPosition = Math.round(yPosition * 1000) / 1000;
    
//     _animate(yPosition, xPosition);
//   }
  
//   var _getMousePos = function(e) {
//     e = e || window.event;
    
//     mouseX = e.pageX;
//     mouseY = e.pageY;
    
//     var xPos = (mouseX / window.innerWidth) - 0.5;
//     var yPos = (mouseY / window.innerHeight) - 0.5;
//     var rotationYValue = 5 * xPos;
//     var rotationXValue = 5 * yPos;
    
//     _animate(rotationYValue,rotationXValue);
//   }
  
//   var _animate = function(rotationYValue, rotationXValue) {
//     gsap.to(slider, 0.6, { rotationY:rotationYValue, rotationX:rotationXValue, ease:Power1.easeOut, transformPerspective:900, transformOrigin:"center" });
//   }
  
//   return {
//     init: _init
//   }
// }();

// TiltAnimation.init();









// function initOciliator(remove) {


//     if(!remove) {

//         var ctx,
//             hue,
//             logo,
//             form,
//             buffer,
//             target = {},
//             tendrils = [],
//             settings = {};

//         settings.debug = false;
//         settings.friction = 0.5;
//         settings.trails = 30;
//         settings.size = 50;
//         settings.dampening = 0.25;
//         settings.tension = 0.98;

//         Math.TWO_PI = Math.PI * 2;

//         // ========================================================================================
//         // Oscillator
//         // ----------------------------------------------------------------------------------------

//         function Oscillator(options) {
//             this.init(options || {});
//         }

//         Oscillator.prototype = (function () {

//             var value = 0;

//             return {

//                 init: function (options) {
//                     this.phase = options.phase || 0;
//                     this.offset = options.offset || 0;
//                     this.frequency = options.frequency || 0.001;
//                     this.amplitude = options.amplitude || 1;
//                 },

//                 update: function () {
//                     this.phase += this.frequency;
//                     value = this.offset + Math.sin(this.phase) * this.amplitude;
//                     return value;
//                 },

//                 value: function () {
//                     return value;
//                 }
//             };

//         })();

//         // ========================================================================================
//         // Tendril
//         // ----------------------------------------------------------------------------------------

//         function Tendril(options) {
//             this.init(options || {});
//         }

//         Tendril.prototype = (function () {

//             function Node() {
//                 this.x = 0;
//                 this.y = 0;
//                 this.vy = 0;
//                 this.vx = 0;
//             }

//             return {

//                 init: function (options) {

//                     this.spring = options.spring + (Math.random() * 0.1) - 0.05;
//                     this.friction = settings.friction + (Math.random() * 0.01) - 0.005;
//                     this.nodes = [];

//                     for (var i = 0, node; i < settings.size; i++) {

//                         node = new Node();
//                         node.x = target.x;
//                         node.y = target.y;

//                         this.nodes.push(node);
//                     }
//                 },

//                 update: function () {

//                     var spring = this.spring,
//                         node = this.nodes[0];

//                     node.vx += (target.x - node.x) * spring;
//                     node.vy += (target.y - node.y) * spring;

//                     for (var prev, i = 0, n = this.nodes.length; i < n; i++) {

//                         node = this.nodes[i];

//                         if (i > 0) {

//                             prev = this.nodes[i - 1];

//                             node.vx += (prev.x - node.x) * spring;
//                             node.vy += (prev.y - node.y) * spring;
//                             node.vx += prev.vx * settings.dampening;
//                             node.vy += prev.vy * settings.dampening;
//                         }

//                         node.vx *= this.friction;
//                         node.vy *= this.friction;
//                         node.x += node.vx;
//                         node.y += node.vy;

//                         spring *= settings.tension;
//                     }
//                 },

//                 draw: function () {

//                     var x = this.nodes[0].x,
//                         y = this.nodes[0].y,
//                         a, b;

//                     ctx.beginPath();
//                     ctx.moveTo(x, y);

//                     for (var i = 1, n = this.nodes.length - 2; i < n; i++) {

//                         a = this.nodes[i];
//                         b = this.nodes[i + 1];
//                         x = (a.x + b.x) * 0.5;
//                         y = (a.y + b.y) * 0.5;

//                         ctx.quadraticCurveTo(a.x, a.y, x, y);
//                     }

//                     a = this.nodes[i];
//                     b = this.nodes[i + 1];

//                     ctx.quadraticCurveTo(a.x, a.y, b.x, b.y);
//                     ctx.stroke();
//                     ctx.closePath();
//                 }
//             };

//         })();

//         // ----------------------------------------------------------------------------------------

//         function init(event) {

//             document.removeEventListener('mousemove', init);
//             document.removeEventListener('touchstart', init);

//             document.addEventListener('mousemove', mousemove);
//             document.addEventListener('touchmove', mousemove);
//             document.addEventListener('touchstart', touchstart);

//             mousemove(event);
//             reset();
//             loop();
//         }

//         function reset() {

//             tendrils = [];

//             for (var i = 0; i < settings.trails; i++) {

//                 tendrils.push(new Tendril({
//                     spring: 0.45 + 0.025 * (i / settings.trails)
//                 }));
//             }
//         }


//         function randomIntFromInterval(min, max) { // min and max included
//             return Math.floor(Math.random() * (max - min + 1) + min);
//         }

//         var color = randomIntFromInterval(1, 2);

//         function loop() {

//             if (!ctx.running) return;

//             ctx.globalCompositeOperation = 'source-over';
//             ctx.fillStyle = '#1D1D1D';
//             ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
//             ctx.globalCompositeOperation = 'lighter';
//             ctx.strokeStyle = 'hsla(346,98%,56%,0.25)';
//             ctx.lineWidth = 1;

//             ctx.strokeStyle = 'hsla('+ctx.frame+',98%,56%,0.25)';
//             document.documentElement.style.setProperty('--link', ctx.strokeStyle);
//             // if (color == 1) {
//             //     ctx.strokeStyle = 'hsla(345,98%,56%,0.25)';
//             // } else {
//             //     ctx.strokeStyle = 'hsla(171,98%,56%,0.25)';
//             // }


//             for (var i = 0, tendril; i < settings.trails; i++) {
//                 tendril = tendrils[i];
//                 tendril.update();
//                 tendril.draw();
//             }

//             ctx.frame++;
//             requestAnimFrame(loop);
//         }

//         function resize() {
//             ctx.canvas.width = window.innerWidth;
//             ctx.canvas.height = window.innerHeight;
//         }

//         function start() {
//             if (!ctx.running) {
//                 ctx.running = true;
//                 loop();
//             }
//         }

//         function stop() {
//             ctx.running = false;
//         }

//         function mousemove(event) {
//             if (event.touches) {
//                 target.x = event.touches[0].pageX;
//                 target.y = event.touches[0].pageY;
//             } else {
//                 target.x = event.clientX
//                 target.y = event.clientY;
//             }
//             event.preventDefault();
//         }

//         function touchstart(event) {
//             if (event.touches.length == 1) {
//                 target.x = event.touches[0].pageX;
//                 target.y = event.touches[0].pageY;
//             }
//         }

//         function keyup(event) {

//             switch (event.keyCode) {
//                 case 32:
//                     save();
//                     break;
//                 default:
//                 // console.log(event.keyCode);
//             }
//         }

//         function letters(id) {

//             var el = document.getElementById(id),
//                 letters = el.innerHTML.replace('&amp;', '&').split(''),
//                 heading = '';

//             for (var i = 0, n = letters.length, letter; i < n; i++) {
//                 letter = letters[i].replace('&', '&amp');
//                 heading += letter.trim() ? '<span class="letter-' + i + '">' + letter + '</span>' : '&nbsp;';
//             }

//             el.innerHTML = heading;
//             setTimeout(function () {
//                 el.className = 'transition-in';
//             }, (Math.random() * 500) + 500);
//         }

//         function save() {

//             if (!buffer) {

//                 buffer = document.createElement('canvas');
//                 buffer.width = screen.availWidth;
//                 buffer.height = screen.availHeight;
//                 buffer.ctx = buffer.getContext('2d');

//                 form = document.createElement('form');
//                 form.method = 'post';
//                 form.input = document.createElement('input');
//                 form.input.type = 'hidden';
//                 form.input.name = 'data';
//                 form.appendChild(form.input);

//                 document.body.appendChild(form);
//             }

//             buffer.ctx.fillStyle = 'rgba(8,5,16)';
//             buffer.ctx.fillRect(0, 0, buffer.width, buffer.height);

//             buffer.ctx.drawImage(canvas,
//                 Math.round(buffer.width / 2 - canvas.width / 2),
//                 Math.round(buffer.height / 2 - canvas.height / 2)
//             );


//             window.open(buffer.toDataURL(), 'wallpaper', 'top=0,left=0,width=' + buffer.width + ',height=' + buffer.height);

//             // form.input.value = buffer.toDataURL().substr(22);
//             // form.submit();
//         }

//         window.requestAnimFrame = (function () {
//             return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (fn) {
//                 window.setTimeout(fn, 1000 / 60)
//             };
//         })();


// //        ctx = document.getElementById('canvas').getContext('2d');

//         ctx.running = true;
//         ctx.frame = 1;


//         hue = new Oscillator({
//             phase: Math.random() * Math.TWO_PI,
//             amplitude: 85,
//             frequency: 0.0015,
//             offset: 285
//         });


//         document.addEventListener('mousemove', init);
//         document.addEventListener('touchstart', init);
//         document.body.addEventListener('orientationchange', resize);
//         window.addEventListener('resize', resize);
//         window.addEventListener('focus', start);
//         window.addEventListener('blur', stop);

//         resize();

//     } else {


//         document.body.removeEventListener('orientationchange', resize);
//         window.removeEventListener('resize', resize);
//         window.removeEventListener('focus', start);
//         window.removeEventListener('blur', stop);

//         document.removeEventListener('mousemove', mousemove);
//         document.removeEventListener('touchmove', mousemove);
//         document.removeEventListener('touchstart', touchstart);


//     }
// }


// initOciliator();

