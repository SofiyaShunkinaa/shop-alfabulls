<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Cookie;

class Basket extends Model {

    /**
     * –°–≤—è–∑—å ¬´–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º¬ª —Ç–∞–±–ª–∏—Ü—ã `baskets` —Å —Ç–∞–±–ª–∏—Ü–µ–π `products`
     */
    public function products() {
        return $this->belongsToMany(Product::class)->withPivot('quantity');
    }

    public function promos()
    {
        return $this->belongsToMany(Promo::class, 'basket_promo');
    }

    public function variants()
    {
        return $this->belongsToMany(ProductVariant::class, 'basket_product', 'basket_id', 'variant_id')
            ->withPivot('quantity');
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ $id –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É $count
     */
    // public function increase($id, $count = 1) {
    //     $this->change($id, $count);
    // }
    public function increase($variantId, $count = 1)
    {
        $this->change($variantId, $count);
    }

    /**
     * –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ $id –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É $count
     */
    // public function decrease($id, $count = 1) {
    //     $this->change($id, -1 * $count);
    // }
    public function decrease($variantId, $count = 1)
    {
        $this->change($variantId, -1 * $count);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
     */
    // public function setQuantity($id, $count = 1) 
    // {
    //     if ($count < 1) {
    //         $count = 1;
    //     }
        
    //     $pivotRow = $this->products()->where('product_id', $id)->first()->pivot;
    //     $pivotRow->update(['quantity' => $count]);
    // }
    public function setQuantity($variantId, $count = 1)
    {
        if ($count < 1) {
            $count = 1;
        }

        $pivotRow = $this->variants()->where('variant_id', $variantId)->first()->pivot;
        $pivotRow->update(['quantity' => $count]);
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ $id –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É $count;
     * –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –µ—â–µ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä; $count
     * –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, —Ç–∞–∫ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
     */
    // private function change($id, $count = 1) {
    //     if ($count === 0) {
    //         return;
    //     }
    //     $id = (int)$id;
    //     // –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ ‚Äî –∏–∑–º–µ–Ω—è–µ–º –∫–æ–ª-–≤–æ
    //     if ($this->products->contains($id)) {
    //         // –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã `basket_product`
    //         $pivotRow = $this->products()->where('product_id', $id)->first()->pivot;
    //         $quantity = $pivotRow->quantity + $count;
    //         if ($quantity > 0) {
    //             // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ $id –≤ –∫–æ—Ä–∑–∏–Ω–µ
    //             $pivotRow->update(['quantity' => $quantity]);
    //         } else {
    //             // –∫–æ–ª-–≤–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    //             $pivotRow->delete();
    //         }
    //     } elseif ($count > 0) { // –∏–Ω–∞—á–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    //         $this->products()->attach($id, ['quantity' => $count]);
    //     }
    //     // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ `updated_at` —Ç–∞–±–ª–∏—Ü—ã `baskets`
    //     $this->touch();
    // }
    private function change($variantId, $count = 1)
    {
        if ($count === 0) {
            return;
        }

        $variantId = (int)$variantId;

        $variant = ProductVariant::findOrFail($variantId);

        $query = $this->variants()->where('variant_id', $variantId);

        if ($query->exists()) {
            $pivotRow = $query->first()->pivot;
            $quantity = $pivotRow->quantity + $count;

            if ($quantity > 0) {
                $pivotRow->update(['quantity' => $quantity]);
            } else {
                $pivotRow->delete();
            }
        } elseif ($count > 0) {
            $this->variants()->attach($variantId, [
                'quantity' => $count,
                'product_id' => $variant->product_id, // üî• –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º product_id —è–≤–Ω–æ
            ]);
        }

        $this->touch();
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º $variantId –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    public function remove($variantId)
    {
        // –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (—Ä–∞–∑—Ä—É—à–∞–µ–º —Å–≤—è–∑—å –ø–æ variant_id)
        $this->variants()->detach($variantId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ `updated_at` –≤ —Ç–∞–±–ª–∏—Ü–µ `baskets`
        $this->touch();
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    public function clear() {
        // —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (—Ä–∞–∑—Ä—É—à–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏)
        $this->products()->detach();
        // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ `updated_at` —Ç–∞–±–ª–∏—Ü—ã `baskets`
        $this->touch();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     */
    public function getAmount() {
        $amount = 0.0;
        foreach ($this->products as $product) {
            $amount = $amount + $product->price * $product->pivot->quantity;
        }
        return $amount;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ
     */
    public static function getCount() {
        $basket_id = request()->cookie('basket_id');
        if (empty($basket_id)) {
            return 0;
        }
        return self::getBasket()->products->count();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
     */
    public function totalWithDiscount()
    {
        return $this->total() - $this->discount();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ—Ä–∑–∏–Ω—ã; –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
     */
    public static function getBasket() {
        $basket_id = (int)request()->cookie('basket_id');
        if (!empty($basket_id)) {
            try {
                $basket = Basket::findOrFail($basket_id);
            } catch (ModelNotFoundException $e) {
                $basket = Basket::create();
            }
        } else {
            $basket = Basket::create();
        }
        Cookie::queue('basket_id', $basket->id, 525600);
        return $basket;
    }
}
